<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[深入浅出索引]]></title>
    <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2FMySQL%E4%B8%93%E6%A0%8F%2F%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[索引的常见模型 哈希表。以 key-value 存储数据，value 以链表的形式存储以解决 key 冲突的问题。哈希表是无序的，增加数据时速度很快，区间查询时需要全表扫描。因此哈希表只适用于只有等值查询的场景，如 Memcached 及其他一些 NoSQL 引擎。 有序数组。有序数组在等值查询和范围查询的场景中性能都非常优秀，但是增加记录时需要挪动后面所有记录，因此只适用于静态存储引擎。 二叉搜索树。每个节点的左儿子小于父节点，父节点小于右儿子。二叉搜索树搜索效率是最高的，但是树高太高，读取磁盘次数太多导致查询速度过慢，因此大多数数据库使用N叉树，子节点之间的大小保证从左到右递增。N叉树中的“N”取决于数据块的大小。 InnoDB 的索引模型InnoDB 使用 B+ 树索引模型，所有数据都存储在 B+ 树中，每一个索引对应一棵 B+ 树，主键索引存储所有数据，非主键索引只存储索引字段及主键。使用非主键索引查询时需要到主键索引树中查询其余数据，即回表。 主键长度越小，普通索引占用空间越小，因此尽量使用自增 ID 做为主键。 覆盖索引当 ID 为主键，建立了 k 索引时，执行：1select ID from T where k=3; 由于 k 索引中存储了主键 ID，不需要再回到主键索引查询其他数据，这种情况称为覆盖索引。由于覆盖索引可以减少树的搜索次数，显著提升性能，所以使用覆盖索引是一个常用的性能优化手段。如：为高频查询请求建立联合索引，覆盖查询需求。 最左前缀原则假如有联合索引 (k1, k2)，查询条件 where k1=10 也能用上这个索引，而查询条件 where k2=10 则不能用。 在建立联合索引的时候，如果通过调整顺序，可以少维护一个索引，则这个顺序需要优先考虑，其次考虑字段占用的空间大小。 索引下推有联合索引 (k1, k2)，查询条件 where k1=3 and k2=5。在 MySQL 5.6 之前，只能使用 k1 在索引树上查询，再回表到主键索引上比对 k2 的值。 MySQL 5.6 引入了索引下推优化（ICP, index condition pushdown），可以再索引遍历过程中，对索引中包含对字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。]]></content>
      <categories>
        <category>读书笔记</category>
        <category>MySQL专栏</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[事务隔离]]></title>
    <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2FMySQL%E4%B8%93%E6%A0%8F%2F%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[概念事务特性： Atomicity 原子性 Consistency 一致性 Isolation 隔离行 Durability 持久性 多个事务同时执行可能产生的问题： 脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）。 隔离级别： 读未提交（read uncommitted）。一个事务还未提交时，它做的变更就能被其他事务看到。 读提交（read commit）。一个事务提交之后，它做的变更才会被其他事务看到。 可重复读（repeatable read）。一个事务执行过程中看到的数据总是跟事务启动时一致的。 串行化（serializable）。对于同一行记录“读”会加“读锁”，“写”会加“写锁”，事务执行完成后才会解锁。 以上隔离级别并行性能依次降低，安全性依次提高。 实现只提及了可重复读的实现方式。 MySQL中每条记录在更新的时候都会同时记录一条回滚操作，不同时刻启动的事务会有不同的read-view。当没有比回滚日志更早启动的事务时，回滚日志会被删除。 长事务会导致系统会存在大量的回滚日志，占用大量存储空间。极端情况回滚日志占用空间会远大于数据占用的。]]></content>
      <categories>
        <category>读书笔记</category>
        <category>MySQL专栏</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一条SQL语句的执行]]></title>
    <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2FMySQL%E4%B8%93%E6%A0%8F%2F%E4%B8%80%E6%9D%A1SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[基础架构 MySQL 的逻辑架构图 连接器客户端建立连接时连接器会通过用户名密码认证身份，并从权限表中查询用户权限，因此修改用户的权限不会影响已建立的连接，只有再新建的连接才会使用新的权限设置。 通过 wait_timeout 可以设置连接器自动断开连接的空闲时间 频繁建立连接会消耗性能，长连接占用的资源会不断增大，可以使用以下2种策略： 定期断开或者执行过一个占用内存的大查询后断开连接 MySQL 5.7或更新版本可以通过执行 mysql_reset_connection 重置连接资源 查询缓存查询语句会进入查询缓存，如果命中缓存会直接返回结果。 不建议使用查询缓存，因为只要表一更新就会清空相关的缓存。 将参数 query_cache_type 设置为 DEMAND 表示默认不使用缓存，需要使用缓存的语句可以用 SQL_CACHE 显示指定，如：1select SQL_CACHE * from T where ID=10; MySQL 8.0 删除了查询缓存的功能。 分析器分析器对 SQL 语句进行词法分析和语法分析。 优化器优化器决定执行 SQL 语句的路径和策略。 执行器执行器先判断有没有表的操作权限，然后根据表的引擎定义使用相应的接口。例如下面一个 SQL 语句的执行流程：1select * from T where ID=10; 调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中； 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。 执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。 使用索引的流程和上面差不多，第一次调用“取满足条件的第一行”，之后调用“满足条件的下一行”。 更新语句的执行流程]]></content>
      <categories>
        <category>读书笔记</category>
        <category>MySQL专栏</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>架构</tag>
        <tag>SQL流程</tag>
      </tags>
  </entry>
</search>
